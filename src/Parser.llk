//..............................................................................
//
//  This file is part of the CMakeDoxyXML toolkit.
//
//  CMakeDoxyXML is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/cmakedoxyxml/license.txt
//
//..............................................................................

lookahead = 2;
ParserClassName = Parser;
TokenClassName = Token;

Includes
{
	#include "Lexer.h"
	#include "Module.h"
}

CppIncludes
{
	#include "Parser.llk.h"
}

Members
{
	Module* m_module;
	ModuleItem* m_lastDeclaredItem;
	dox::Parser m_doxyParser;
	sl::String m_fileName;
	int m_scopeLevel;
}

Members2
{
	Parser(Module* module);

	void
	create(
		const sl::StringRef& fileName,
		int startSymbolKind = StartSymbol
		)
	{
		m_fileName = fileName;
		llk::Parser<Parser, Token>::create(startSymbolKind);
	}
}

start
nullable
file
	:	command*
	;

nullable
block
	enter
	{
		m_scopeLevel++;
	}
	leave
	{
		m_scopeLevel--;
	}
	:	command*
	;

command
	:	function_command
	|	macro_command
	|	if_command
	|	foreach_command
	|	while_command
	|	set_command
	|	TokenKind_Identifier '(' argument* ')'
	;

class
{
	Token m_token;
}
argument
	:	TokenKind_Identifier
			{
				$.m_token = $1;
			}
	|	TokenKind_QuotedArg
	|	TokenKind_UnquotedArg
	;

function_command
	:	TokenKind_Function '(' argument $n argument* ')'
			{
				if (!m_scopeLevel && $n.m_token.m_tokenKind == TokenKind_Identifier)
					printf("function: %s\n", $n.m_token.m_data.m_string.sz());
			}
		block
		TokenKind_EndFunction '(' argument* ')'
	;

macro_command
	:	TokenKind_Macro '(' argument $n argument* ')'
			{
			if (!m_scopeLevel && $n.m_token.m_tokenKind == TokenKind_Identifier)
					printf("macro: %s\n", $n.m_token.m_data.m_string.sz());
			}
		block
		TokenKind_EndMacro '(' argument* ')'
	;

if_command
	:	TokenKind_If '(' argument* ')'
		block
		(
			TokenKind_ElseIf '(' argument* ')'
			block
		)*
		(
			TokenKind_Else '(' argument* ')'
			block
		)?
		TokenKind_EndIf '(' argument* ')'
	;

foreach_command
	:	TokenKind_ForEach '(' argument* ')'
		block
		TokenKind_EndForEach '(' argument* ')'
	;

while_command
	:	TokenKind_While '(' argument* ')'
		block
		TokenKind_EndWhile '(' argument* ')'
	;

set_command
	:	TokenKind_Set '(' argument $n argument* ')'
			{
				if (!m_scopeLevel && $n.m_token.m_tokenKind == TokenKind_Identifier)
					printf("global variable: %s\n", $n.m_token.m_data.m_string.sz());
			}
	;
