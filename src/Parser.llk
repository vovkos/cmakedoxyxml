//..............................................................................
//
//  This file is part of the CMakeDoxyXML toolkit.
//
//  CMakeDoxyXML is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/cmakedoxyxml/license.txt
//
//..............................................................................

HeaderFileBegin {
	#pragma once

	#include "Lexer.h"
	#include "Module.h"
}

Members {
protected:
	Module* m_module;
	ModuleItem* m_lastDeclaredItem;
	dox::Parser m_doxyParser;
	int m_scopeLevel;

public:
	Parser(Module* module);

	void
	create(
		const sl::StringRef& fileName,
		int startSymbolKind = StartSymbol
	) {
		llk::Parser<Parser, Token>::create(fileName, startSymbolKind);
	}

	ModuleItem*
	getLastDeclaredItem() {
		return m_lastDeclaredItem;
	}

	int
	getScopeLevel() {
		return m_scopeLevel;
	}

	void
	addDoxyComment(
		const sl::StringRef& comment,
		const lex::LineCol& pos,
		bool isSingleLine,
		handle_t lastDeclaredItem
	) {
		m_doxyParser.addComment(comment, pos, isSingleLine, lastDeclaredItem);
	}

protected:
	Variable*
	declareVariableEx(
		ModuleItemKind itemKind,
		const Token::Pos& pos,
		const sl::StringRef& name
	);

	Variable*
	declareVariable(
		const Token::Pos& pos,
		const sl::StringRef& name
	) {
		return declareVariableEx(ModuleItemKind_Variable, pos, name);
	}

	Variable*
	declareParameter(
		const Token::Pos& pos,
		const sl::StringRef& name
	) {
		return declareVariableEx(ModuleItemKind_Parameter, pos, name);
	}

	Function*
	declareFunctionEx(
		ModuleItemKind itemKind,
		const Token::Pos& pos,
		const sl::StringRef& name
	);

	Function*
	declareFunction(
		const Token::Pos& pos,
		const sl::StringRef& name
	) {
		return declareFunctionEx(ModuleItemKind_Function, pos, name);
	}

	Function*
	declareMacro(
		const Token::Pos& pos,
		const sl::StringRef& name
	) {
		return declareFunctionEx(ModuleItemKind_Macro, pos, name);
	}

	void
	finalizeDeclaration(
		const Token::Pos& pos,
		ModuleItem* item,
		const sl::StringRef& name = NULL
	);
}

start
nullable
file
	:	command*
	;

nullable
block
	enter {
		m_scopeLevel++;
	}
	leave {
		m_scopeLevel--;
	}
	:	command*
	;

command
	:	function_command
	|	macro_command
	|	if_command
	|	foreach_command
	|	while_command
	|	set_command
	|	TokenKind_Identifier '(' argument* ')'
	;

struct {
	Token m_token;
}
argument
	:	TokenKind_Identifier
			{
				$.m_token = $1;
			}
	|	TokenKind_QuotedArg
	|	TokenKind_UnquotedArg
	;

function_command
	local {
		Function* $function;
	}
	:	TokenKind_Function '('
		argument $n
			{
				if (!m_scopeLevel && $n.m_token.m_tokenKind == TokenKind_Identifier)
					$function = declareFunction($1.m_pos, $n.m_token.m_data.m_string);
			}
		param_list<$function ? &(*$function).m_paramArray : NULL>
		')'
		block
		TokenKind_EndFunction '(' argument* ')'
	;

macro_command
	local {
		Function* $macro;
	}
	:	TokenKind_Macro '('
		argument $n
			{
				if (!m_scopeLevel && $n.m_token.m_tokenKind == TokenKind_Identifier)
					$macro = declareMacro($1.m_pos, $n.m_token.m_data.m_string);
			}
		param_list<$macro ? &(*$macro).m_paramArray : NULL>
		')'
		block
		TokenKind_EndMacro '(' argument* ')'
	;

nullable
param_list<sl::Array<Variable*>* $paramArray>
	:	(
			argument
				{
					if ($paramArray && $1.m_token.m_tokenKind == TokenKind_Identifier)
					{
						Variable* param = declareParameter($1.m_token.m_pos, $1.m_token.m_data.m_string);
						$paramArray->append(param);
					}
				}
		)*
	;

if_command
	:	TokenKind_If '(' argument* ')'
		block
		(
			TokenKind_ElseIf '(' argument* ')'
			block
		)*
		(
			TokenKind_Else '(' argument* ')'
			block
		)?
		TokenKind_EndIf '(' argument* ')'
	;

foreach_command
	:	TokenKind_ForEach '(' argument* ')'
		block
		TokenKind_EndForEach '(' argument* ')'
	;

while_command
	:	TokenKind_While '(' argument* ')'
		block
		TokenKind_EndWhile '(' argument* ')'
	;

set_command
	:	TokenKind_Set '(' argument $n argument* ')'
			{
				if (!m_scopeLevel && $n.m_token.m_tokenKind == TokenKind_Identifier)
					declareVariable($1.m_pos, $n.m_token.m_data.m_string);
			}
	;
